/*! Notify.js v1.0.0 - A lightweight toast notification library */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t=t||self).toastr=e()
}(this,(function(){
'use strict';

const Notify = {
    VERSION: '1.0.0',
    defaults: {
        position: 'top-right',
        duration: 3000,
        closeButton: true,
        preventDuplicates: true,
        maxToasts: 5,
        spacing: 10,
        icons: {
            success: '✓',
            error: '✕',
            warning: '!',
            info: 'i'
        },
        colors: {
            success: '#4CAF50',
            error: '#F44336',
            warning: '#FF9800',
            info: '#2196F3',
            text: '#FFFFFF',
            background: '#323232',
            close: '#FFFFFF'
        }
    },
    instances: [],
    container: null,

    init() {
        if (!this.container) {
            this.container = document.createElement('div');
            this.container.className = `notify-container ${this.defaults.position}`;
            document.body.appendChild(this.container);
            this._setupStyles();
        }
    },

    _setupStyles() {
        if (document.getElementById('notify-styles')) return;

        const style = document.createElement('style');
        style.id = 'notify-styles';
        style.textContent = `
            .notify-container {
                position: fixed;
                z-index: 9999;
                pointer-events: none;
                display: flex;
                flex-direction: column;
                gap: ${this.defaults.spacing}px;
                padding: 15px;
                box-sizing: border-box;
                max-width: 100%;
                width: 320px;
            }
            .notify-container.top-right { top: 0; right: 0; }
            .notify-container.top-left { top: 0; left: 0; }
            .notify-container.bottom-right { bottom: 0; right: 0; }
            .notify-container.bottom-left { bottom: 0; left: 0; }
            .notify-toast {
                position: relative;
                padding: 12px 16px;
                border-radius: 4px;
                color: #fff;
                background: #323232;
                box-shadow: 0 3px 10px rgba(0,0,0,0.1), 0 3px 3px rgba(0,0,0,0.05);
                display: flex;
                align-items: center;
                pointer-events: auto;
                transform: translateZ(0);
                transition: all 0.3s ease;
                opacity: 0;
                max-height: 0;
                margin: 0;
                overflow: hidden;
            }
            .notify-toast.show {
                opacity: 1;
                max-height: 200px;
                margin: 2px 0;
                animation: fadeIn 0.3s ease-out;
            }
            .notify-toast.hide {
                opacity: 0;
                max-height: 0;
                margin: 0;
                animation: fadeOut 0.3s ease-in;
            }
            .notify-toast.success { background-color: ${this.defaults.colors.success}; }
            .notify-toast.error { background-color: ${this.defaults.colors.error}; }
            .notify-toast.warning { background-color: ${this.defaults.colors.warning}; }
            .notify-toast.info { background-color: ${this.defaults.colors.info}; }
            .notify-icon {
                margin-right: 12px;
                font-weight: bold;
                font-size: 18px;
                flex-shrink: 0;
                width: 24px;
                height: 24px;
                display: flex;
                align-items: center;
                justify-content: center;
                border-radius: 50%;
                background: rgba(255, 255, 255, 0.2);
            }
            .notify-content {
                flex: 1;
                font-size: 14px;
                line-height: 1.4;
                word-break: break-word;
            }
            .notify-close {
                margin-left: 12px;
                cursor: pointer;
                opacity: 0.7;
                font-size: 16px;
                line-height: 1;
                transition: opacity 0.2s;
                background: none;
                border: none;
                color: ${this.defaults.colors.close};
                padding: 0;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            .notify-close:hover { opacity: 1; }
            @keyframes fadeIn {
                from { opacity: 0; transform: translateY(-10px); }
                to { opacity: 1; transform: translateY(0); }
            }
            @keyframes fadeOut {
                from { opacity: 1; transform: translateY(0); }
                to { opacity: 0; transform: translateY(-10px); }
            }
            @media (max-width: 480px) {
                .notify-container {
                    width: 100%;
                    max-width: 100%;
                    padding: 10px;
                }
                .notify-toast {
                    width: 100%;
                    margin: 2px 0;
                }
            }
        `;
        document.head.appendChild(style);
    },

    _createToast(message, type = 'info', options = {}) {
        this.init();

        // Check for duplicates if enabled
        if (this.defaults.preventDuplicates) {
            const lastToast = this.instances[this.instances.length - 1];
            if (lastToast && lastToast.message === message && lastToast.type === type) {
                return lastToast;
            }
        }

        // Create toast element
        const toast = document.createElement('div');
        toast.className = `notify-toast notify-${type}`;
        
        // Set position
        this.container.className = `notify-container ${options.position || this.defaults.position}`;

        // Set background color based on type
        const bgColor = options.colors?.[type] || this.defaults.colors[type] || this.defaults.colors.background;
        toast.style.backgroundColor = bgColor;
        
        // Create icon
        const icon = document.createElement('div');
        icon.className = 'notify-icon';
        icon.textContent = options.icons?.[type] || this.defaults.icons[type] || '';
        
        // Create content
        const content = document.createElement('div');
        content.className = 'notify-content';
        content.textContent = message;
        
        // Create close button
        const closeButton = document.createElement('button');
        closeButton.className = 'notify-close';
        closeButton.innerHTML = '&times;';
        closeButton.setAttribute('aria-label', 'Close');
        
        // Assemble toast
        toast.appendChild(icon);
        toast.appendChild(content);
        if (options.closeButton !== false) {
            toast.appendChild(closeButton);
        }
        
        // Add to container
        this.container.appendChild(toast);
        
        // Force reflow to enable transition
        void toast.offsetHeight;
        
        // Show toast
        toast.classList.add('show');
        
        // Set up auto-close if duration is set
        let timeoutId;
        const duration = options.duration ?? this.defaults.duration;
        
        if (duration > 0) {
            timeoutId = setTimeout(() => {
                this._removeToast(toast);
            }, duration);
        }
        
        // Set up close button
        const close = () => {
            if (timeoutId) clearTimeout(timeoutId);
            this._removeToast(toast);
        };
        
        closeButton.onclick = close;
        
        // Add to instances
        const instance = {
            element: toast,
            message,
            type,
            close
        };
        
        this.instances.push(instance);
        
        // Limit number of toasts
        if (this.instances.length > this.defaults.maxToasts) {
            this._removeToast(this.instances[0].element);
        }
        
        return instance;
    },
    
    _removeToast(toast) {
        if (!toast || !toast.parentNode) return;
        
        toast.classList.remove('show');
        toast.classList.add('hide');
        
        // Remove from DOM after animation
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
            
            // Remove from instances
            this.instances = this.instances.filter(instance => instance.element !== toast);
        }, 300);
    },
    
    // Public API
    success(message, options = {}) {
        return this._createToast(message, 'success', options);
    },
    
    error(message, options = {}) {
        return this._createToast(message, 'error', options);
    },
    
    warning(message, options = {}) {
        return this._createToast(message, 'warning', options);
    },
    
    info(message, options = {}) {
        return this._createToast(message, 'info', options);
    },
    
    config(options = {}) {
        this.defaults = { ...this.defaults, ...options };
        
        // Update container position if changed
        if (options.position && this.container) {
            this.container.className = `notify-container ${options.position}`;
        }
        
        // Update styles if colors changed
        if (options.colors) {
            const style = document.getElementById('notify-styles');
            if (style) style.remove();
            this._setupStyles();
        }
        
        return this;
    },
    
    closeAll() {
        this.instances.forEach(instance => instance.close());
        return this;
    }
};

// Initialize on DOM ready
if (typeof document !== 'undefined') {
    document.addEventListener('DOMContentLoaded', () => {
        Notify.init();
    });
}

return Notify;
}));
